#include<bits/stdc++.h>
using namespace std;

#define ll long long
#define vi vector<long long>
#define r(i, a) for(int i=0; i<a; i++)
#define re(i, a, b) for(int i=a; i<b; i++)
#define inp(a,b) cin>>a>>b
#define in(a) cin>>t
#define pb push_back
#define mod 1000000007
#define ma unordered_map<long long>
//
//class node{
//    public:
//    ll data;
//    node *left;
//    node *right;
//    node (ll val){
//        data=val;
//        left = right = NULL;
//    }
//    
//};
//
//node *insert(ll val, node *root){
//    if(root==NULL){
//        return new node(val);
//    }
//    else if(val>root->data){
//        root->right = insert(val, root->right); 
//    }
//    else if(val<=root->data){
//        root->left = insert(val, root->left);
//    }
//}
//
//void inorder(node *root){
//    if(root!=NULL){
//        inorder(root->left);
//        cout<<root->data<<" ";
//        inorder(root->right);
//    }
//}
//
//
//ll findheight(node *root){
//    if(root==NULL)
//        return 0;
//    ll l=0,r=0;
//    if(root->left!=NULL) l=findheight(root->left);
//    if(root->right!=NULL) r=findheight(root->right);
//    return max(l,r)+1;
//}

//ll n;



void func(){ 
    ll n;
    cin>>n;
    vector<ll>v;
    map<ll , ll> m;
    for(int i=0; i<n; i++){
        ll val;
        cin>>val;
        v.push_back(val);
    }
    //sorting the array initially so that when I use lower bound it will be comfortable.
    sort(v.begin(), v.end());
    //I am storing the latest index of the element in a hash table
    for(int i=0; i<v.size(); i++){
        m[v[i]]=i;
    }
    
    ll q;
    cin>>q;
    while(q--)
    {
        ll val;
        cin>>val;
        //I am finding the value which is greater than or equal to the given value using lower bound
        auto it= lower_bound(v.begin(), v.end(), val) - v.begin();
//        cout<<it<<endl;
    //for each lower bound value we need to check whether the value is = to the value which we want 
    // if the value in the lower bound is greater than the value which we need then return the length of the array till v[lower bound]-1
    //else if the value is equal to the value which we need then check the latest index of the array value and find the length for that. 
    //Suppose if the lower bound returns 0 we need to check whether the v[0] == value if that is the case then we need to return the length till the latest index of v[0]
    //else we return 0
        // if the lower bound is returning 0 then we need to check
        if(it==0){
            if(v[it]==val)
                cout<<m[v[it]]+1<<endl;
            else
                cout<<0<<endl;
        }
        else if(val>=v[v.size()-1]){
           cout<<v.size()<<endl;
        }
        else{
        if(v[it]==val){
            cout<<m[v[it]]+1<<endl;
        } 
        else{
            cout<<m[v[it-1]]+1<<endl;
        }
        }
    }

}

int main(){

ios_base::sync_with_stdio(false);
cin.tie(NULL);
cout.tie(NULL);

//sieve();

//int t;
//cin >> t;
//for(ll i=1; i<=t; i++)
//{
    
    func();
//    cout<<endl;
//cout<<func()<<endl;

//if(func())
//    cout<<"Yes"<< endl;
//else
//    cout <<"No"<<endl; 
//cout<<"Case:"<<i<<" "<<     <<endl;
//}
return 0;
}
